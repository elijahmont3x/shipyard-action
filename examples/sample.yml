version: "1.0"
domain: "example.com"

ssl:
  enabled: true
  provider: "letsencrypt"
  email: "admin@example.com"
  selfSigned: false
  dnsChallenge: true
  dnsProvider: "cloudflare"
  dnsCredentials:
    CF_API_TOKEN: "${CLOUDFLARE_API_TOKEN}"

proxy:
  type: "nginx"
  port: 80
  httpsPort: 443

services:
  - name: "postgres"
    image: "postgres:13"
    environment:
      POSTGRES_USER: "app"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "app_db"
    ports:
      - "5432:5432"
    volumes:
      - source: "postgres_data"
        destination: "/var/lib/postgresql/data"
        type: "volume"
    healthCheck:
      type: "tcp"
      port: 5432
      interval: 10
      timeout: 5
      retries: 3
      startPeriod: 10

  - name: "redis"
    image: "redis:6"
    ports:
      - "6379:6379"
    volumes:
      - source: "redis_data"
        destination: "/data"
        type: "volume"
    healthCheck:
      type: "tcp"
      port: 6379
      interval: 10
      timeout: 5
      retries: 3
      startPeriod: 5

apps:
  - name: "backend"
    image: "myapp/backend:latest"
    subdomain: "api"
    environment:
      NODE_ENV: "production"
      DATABASE_URL: "postgres://app:password@postgres:5432/app_db"
      REDIS_URL: "redis://redis:6379"
    ports:
      - "8080:8080"
    dependsOn:
      - "postgres"
      - "redis"
    healthCheck:
      type: "http"
      path: "/health"
      port: 8080
      interval: 10
      timeout: 5
      retries: 3
      startPeriod: 10

  - name: "frontend"
    image: "myapp/frontend:latest"
    subdomain: ""  # Use root domain
    environment:
      NODE_ENV: "production"
      API_URL: "https://api.example.com"
    ports:
      - "3000:3000"
    dependsOn:
      - "backend"
    healthCheck:
      type: "http"
      path: "/"
      port: 3000
      interval: 10
      timeout: 5
      retries: 3
      startPeriod: 5

env:
  global:
    TZ: "UTC"
    ENVIRONMENT: "production"